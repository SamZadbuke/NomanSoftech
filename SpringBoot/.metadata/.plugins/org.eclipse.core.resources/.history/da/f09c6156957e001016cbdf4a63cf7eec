package com.nomansoftech.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import com.nomansoftech.entities.CustomerOrder;
import com.nomansoftech.entities.OrderItem;
import com.nomansoftech.entities.ProductSummary;
import com.nomansoftech.entities.User;
import com.nomansoftech.entities.UserOrder;

public interface UserRepository  extends JpaRepository<User, Integer>{
	

	@Query("SELECT i FROM OrderItem i WHERE i.userorder.userorder_id = :orderId")
	List<OrderItem> findOrderItemsByOrderId(@Param("orderId") int orderId);



	 // Fetch all orders for a specific user
	// Fetch all orders for a specific user
	@Query("SELECT new com.nomansoftech.entities.UserOrder(o.userorder_id, o.orderStatus, o.orderDate) " +
		       "FROM UserOrder o WHERE o.user.id = :userId")
		List<UserOrder> findAllOrders(@Param("userId") int userId);



	// Update order status
	@Modifying
	@Transactional
	@Query("UPDATE UserOrder o SET o.orderStatus = :status WHERE o.userorder_id = :orderId")
	int updateOrderStatus(@Param("orderId") int orderId, @Param("status") String status);

	// Monthly summary
	// Monthly product summary for a specific buyer
	@Query("SELECT NEW com.nomansoftech.entities.ProductSummary(" +
	       "c.categoryId, c.categoryName, SUM(i.quantity), 'Monthly') " +
	       "FROM UserOrder o " +
	       "JOIN o.items i " +
	       "JOIN i.product c " +
	       "WHERE o.user.id = :userId " +
	       "AND MONTH(o.orderDate) = MONTH(CURRENT_DATE) " +
	       "AND YEAR(o.orderDate) = YEAR(CURRENT_DATE) " +
	       "GROUP BY c.categoryId, c.categoryName")
	List<ProductSummary> findMonthlyByUserId(@Param("userId") int userId);

	// Yearly product summary for a specific buyer
	@Query("SELECT NEW com.nomansoftech.entities.ProductSummary(" +
	       "c.categoryId, c.categoryName, SUM(i.quantity), 'Yearly') " +
	       "FROM UserOrder o " +
	       "JOIN o.items i " +
	       "JOIN i.product c " +
	       "WHERE o.user.id = :userId " +
	       "AND YEAR(o.orderDate) = YEAR(CURRENT_DATE) " +
	       "GROUP BY c.categoryId, c.categoryName")
	List<ProductSummary> findYearlyByUserId(@Param("userId") int userId);


   
	// Monthly summary for all users
	@Query("SELECT NEW com.nomansoftech.entities.ProductSummary(" +
	       "o.user.id, 'All Categories', SUM(i.quantity), 'Monthly') " +
	       "FROM UserOrder o " +
	       "JOIN o.items i " +
	       "GROUP BY o.user.id")
	List<ProductSummary> findMonthlyForAll();

	// Yearly summary for all users
	@Query("SELECT NEW com.nomansoftech.entities.ProductSummary(" +
	       "o.user.id, 'All Categories', SUM(i.quantity), 'Yearly') " +
	       "FROM UserOrder o " +
	       "JOIN o.items i " +
	       "GROUP BY o.user.id")
	List<ProductSummary> findYearlyForAll();
	
	@Query("SELECT o FROM UserOrder o WHERE o.user.id = :userId")
	List<CustomerOrder> findAllOrdersByUserId(@Param("userId") Integer userId);



}
