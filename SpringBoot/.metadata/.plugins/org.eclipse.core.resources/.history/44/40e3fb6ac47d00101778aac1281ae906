////package com.nomansoftech.security;
////
////
////
////import org.springframework.context.annotation.Bean;
////import org.springframework.context.annotation.Configuration;
////import org.springframework.security.config.annotation.web.builders.HttpSecurity;
////import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
////import org.springframework.security.web.SecurityFilterChain;
////import org.springframework.web.cors.CorsConfiguration;
////import org.springframework.web.cors.CorsConfigurationSource;
////import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
////
////import java.util.Arrays;
////
////@Configuration
////public class SecurityConfig {
////
////    @Bean
////    public BCryptPasswordEncoder passwordEncoder() {
////        return new BCryptPasswordEncoder();
////    }
////
////    @Bean
////    public CorsConfigurationSource corsConfigurationSource() {
////        CorsConfiguration configuration = new CorsConfiguration();
////        
////        // Make sure to allow the correct frontend origin
////        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000")); // React frontend
////        
////        // Allow all necessary HTTP methods
////        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
////        
////        // Allow headers for authentication and content processing
////        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "X-Requested-With"));
////        
////        // Allow frontend to access authentication headers
////        configuration.setExposedHeaders(Arrays.asList("Authorization"));
////        
////        // Enable credentials (important for session cookies or tokens)
////        configuration.setAllowCredentials(true);
////        
////        // Cache the CORS config for performance
////        configuration.setMaxAge(3600L);
////
////        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
////        source.registerCorsConfiguration("/**", configuration);
////        return source;
////    }
////
////    @Bean
////    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
////        return http
////            .cors().configurationSource(corsConfigurationSource()) // Apply CORS settings
////            .and()
////            .csrf().disable() // Disable CSRF for testing (enable in production)
////            .authorizeRequests()
////            .requestMatchers("/admin/**").permitAll() // Allow unrestricted access to admin APIs
////            .anyRequest().authenticated() // Require authentication for other requests
////            .and()
////            .formLogin().disable()
////            .httpBasic().disable()
////            .build();
////    }
////}
//
//
//
//// This file configures Spring Security for your application.
//package com.nomansoftech.security;
//
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.core.userdetails.User;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
//import org.springframework.security.provisioning.InMemoryUserDetailsManager;
//import org.springframework.security.web.SecurityFilterChain;
//import org.springframework.web.cors.CorsConfiguration;
//import org.springframework.web.cors.CorsConfigurationSource;
//import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
//import static org.springframework.security.config.Customizer.withDefaults;
//
//import java.util.Arrays;
//
//@Configuration
//public class SecurityConfig {
//
//    // This bean provides a password encoder for securely encrypting passwords.
//    @Bean
//    public BCryptPasswordEncoder passwordEncoder() {
//        return new BCryptPasswordEncoder();
//    }
//    
//    // This bean configures a user with a specific username and password.
//    // This is an in-memory user for demonstration and testing purposes.
//    // In a production application, you would connect to a database to manage users.
//    @Bean
//    public UserDetailsService userDetailsService() {
//        UserDetails admin = User.builder()
//                .username("admin")
//                .password(passwordEncoder().encode("password")) // The password is "password"
//                .roles("ADMIN")
//                .build();
//        
//        return new InMemoryUserDetailsManager(admin);
//    }
//
//    // This bean configures CORS (Cross-Origin Resource Sharing) settings for your API.
//    @Bean
//    public CorsConfigurationSource corsConfigurationSource() {
//        CorsConfiguration configuration = new CorsConfiguration();
//        
//        // Allow the React frontend origin to make requests.
//        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
//        
//        // Define which HTTP methods are allowed.
//        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
//        
//        // Define which headers are allowed in the request.
//        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "X-Requested-With"));
//        
//        // Define which headers from the response are exposed to the frontend.
//        configuration.setExposedHeaders(Arrays.asList("Authorization"));
//        
//        // Allow credentials (like cookies or tokens) to be included in the request.
//        configuration.setAllowCredentials(true);
//        
//        // Set the maximum age for pre-flight requests to be cached.
//        configuration.setMaxAge(3600L);
//
//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//        source.registerCorsConfiguration("/**", configuration);
//        return source;
//    }
//
//    // This bean configures the security filter chain.
//    // It's the main place where you define security rules for your application's endpoints.
//    @Bean
//    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//        http
//            .csrf(csrf -> csrf.disable()) // Disable CSRF for simplicity (re-enable in production)
//            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
//            .authorizeHttpRequests(authorize -> authorize
//                // Only users with the ADMIN role can access the /admin path.
//                .requestMatchers("/admin/**").hasRole("ADMIN") 
//                // All other requests require authentication.
//                .anyRequest().authenticated()
//            )
//            .httpBasic(withDefaults()); // Use HTTP Basic for authentication.
//
//        return http.build();
//    }
//}
